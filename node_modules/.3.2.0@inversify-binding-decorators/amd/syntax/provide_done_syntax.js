define(["require", "exports", "inversify", "inversify"], function (require, exports, inversify_1, inversify_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProvideDoneSyntax = /** @class */ (function () {
        function ProvideDoneSyntax(binding) {
            this._binding = binding;
        }
        ProvideDoneSyntax.prototype.done = function (force) {
            var that = this;
            return function (target) {
                var isAlreadyDecorated = Reflect.hasOwnMetadata(inversify_2.METADATA_KEY.PARAM_TYPES, target);
                var redecorateWithInject = force === true;
                if (redecorateWithInject === true && isAlreadyDecorated === false) {
                    inversify_1.decorate(inversify_1.injectable(), target);
                }
                else if (redecorateWithInject === true && isAlreadyDecorated === true) {
                    // Do nothing
                }
                else {
                    try {
                        inversify_1.decorate(inversify_1.injectable(), target);
                    }
                    catch (e) {
                        throw new Error("Cannot apply @provideFluent decorator multiple times but is has been used " +
                            ("multiple times in " + target.name + " ") +
                            "Please use @done(true) if you are trying to declare multiple bindings!");
                    }
                }
                that._binding.implementationType = target;
                return target;
            };
        };
        return ProvideDoneSyntax;
    }());
    exports.default = ProvideDoneSyntax;
});
