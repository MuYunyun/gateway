"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var provide_on_syntax_1 = require("./provide_on_syntax");
var ProvideWhenSyntax = /** @class */ (function () {
    function ProvideWhenSyntax(bindingWhenSyntax, provideDoneSyntax) {
        this._bindingWhenSyntax = bindingWhenSyntax;
        this._provideDoneSyntax = provideDoneSyntax;
    }
    ProvideWhenSyntax.prototype.when = function (constraint) {
        var bindingOnSyntax = this._bindingWhenSyntax.when(constraint);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenTargetNamed = function (name) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenTargetNamed(name);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenTargetTagged = function (tag, value) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenTargetTagged(tag, value);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenInjectedInto = function (parent) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenInjectedInto(parent);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenParentNamed = function (name) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenParentNamed(name);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenParentTagged = function (tag, value) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenParentTagged(tag, value);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenAnyAncestorNamed(name);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenNoAncestorNamed = function (name) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenNoAncestorNamed(name);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        var bindingOnSyntax = this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
        return new provide_on_syntax_1.default(bindingOnSyntax, this._provideDoneSyntax);
    };
    ProvideWhenSyntax.prototype.done = function (force) {
        return this._provideDoneSyntax.done(force);
    };
    return ProvideWhenSyntax;
}());
exports.default = ProvideWhenSyntax;
