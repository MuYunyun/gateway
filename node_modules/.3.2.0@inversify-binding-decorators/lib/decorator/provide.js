"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
function provide(container) {
    return function _provide(serviceIdentifier, force) {
        var bindingWhenOnSyntax = container.bind(serviceIdentifier).to(null);
        return function (target) {
            var isAlreadyDecorated = Reflect.hasOwnMetadata(inversify_1.METADATA_KEY.PARAM_TYPES, target);
            var redecorateWithInject = force === true;
            if (redecorateWithInject === true && isAlreadyDecorated === false) {
                inversify_1.decorate(inversify_1.injectable(), target);
            }
            else if (redecorateWithInject === true && isAlreadyDecorated === true) {
                // Do nothing
            }
            else {
                try {
                    inversify_1.decorate(inversify_1.injectable(), target);
                }
                catch (e) {
                    throw new Error("Cannot apply @provide decorator multiple times but is has been used " +
                        ("multiple times in " + target.name + " ") +
                        "Please use @provide(ID, true) if you are trying to declare multiple bindings!");
                }
            }
            var binding = bindingWhenOnSyntax._binding;
            binding.implementationType = target;
            return target;
        };
    };
}
exports.default = provide;
