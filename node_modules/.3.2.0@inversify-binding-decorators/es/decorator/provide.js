import { decorate, injectable, METADATA_KEY } from "inversify";
function provide(container) {
    return function _provide(serviceIdentifier, force) {
        var bindingWhenOnSyntax = container.bind(serviceIdentifier).to(null);
        return function (target) {
            var isAlreadyDecorated = Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target);
            var redecorateWithInject = force === true;
            if (redecorateWithInject === true && isAlreadyDecorated === false) {
                decorate(injectable(), target);
            }
            else if (redecorateWithInject === true && isAlreadyDecorated === true) {
                // Do nothing
            }
            else {
                try {
                    decorate(injectable(), target);
                }
                catch (e) {
                    throw new Error("Cannot apply @provide decorator multiple times but is has been used " +
                        ("multiple times in " + target.name + " ") +
                        "Please use @provide(ID, true) if you are trying to declare multiple bindings!");
                }
            }
            var binding = bindingWhenOnSyntax._binding;
            binding.implementationType = target;
            return target;
        };
    };
}
export default provide;
