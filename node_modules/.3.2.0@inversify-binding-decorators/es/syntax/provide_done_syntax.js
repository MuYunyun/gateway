import { decorate, injectable } from "inversify";
import { METADATA_KEY } from "inversify";
var ProvideDoneSyntax = /** @class */ (function () {
    function ProvideDoneSyntax(binding) {
        this._binding = binding;
    }
    ProvideDoneSyntax.prototype.done = function (force) {
        var that = this;
        return function (target) {
            var isAlreadyDecorated = Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target);
            var redecorateWithInject = force === true;
            if (redecorateWithInject === true && isAlreadyDecorated === false) {
                decorate(injectable(), target);
            }
            else if (redecorateWithInject === true && isAlreadyDecorated === true) {
                // Do nothing
            }
            else {
                try {
                    decorate(injectable(), target);
                }
                catch (e) {
                    throw new Error("Cannot apply @provideFluent decorator multiple times but is has been used " +
                        ("multiple times in " + target.name + " ") +
                        "Please use @done(true) if you are trying to declare multiple bindings!");
                }
            }
            that._binding.implementationType = target;
            return target;
        };
    };
    return ProvideDoneSyntax;
}());
export default ProvideDoneSyntax;
